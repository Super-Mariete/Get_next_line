El casteo de punteros void en C es un concepto clave para trabajar con tipos de datos genéricos y es muy utilizado cuando se desea tener un puntero que pueda apuntar a cualquier tipo de dato. El tipo void * es conocido como un puntero genérico porque puede apuntar a cualquier tipo de dato, pero no puede ser dereferenciado directamente sin realizar un casteo adecuado.

Concepto Básico del Puntero void *
Un puntero de tipo void * no tiene un tipo asociado. Esto significa que:

No tiene información sobre el tamaño del tipo al que apunta.
No se puede realizar operaciones aritméticas directamente sobre él.
No se puede dereferenciar (es decir, no puedes obtener el valor al que apunta) sin hacer un casteo explícito.
La ventaja de void * es que permite escribir funciones y estructuras que sean flexibles y puedan trabajar con diferentes tipos de datos.

xplicación:
Definición del puntero void *: En la función imprimir_int, el argumento void *ptr es un puntero genérico que puede apuntar a cualquier tipo de dato.
Casteo: Para poder acceder al valor almacenado en el puntero, debemos hacer un casteo del puntero void * a un puntero del tipo correcto (int * en este caso).
Dereferenciación: Una vez casteado, podemos usar el puntero resultante (int_ptr) como si fuera un puntero a un entero y dereferenciarlo para acceder al valor original.
¿Por Qué Usar Punteros void *?
El uso de punteros void * es muy común en C, especialmente en bibliotecas y funciones que necesitan ser genéricas y trabajar con diferentes tipos de datos. Algunos casos comunes son:

Funciones genéricas: Como qsort y bsearch en la biblioteca estándar de C, que trabajan con punteros void * para ordenar o buscar elementos de cualquier tipo.
Estructuras de datos genéricas: Como listas enlazadas, pilas y colas que pueden almacenar elementos de diferentes tipos.
Bibliotecas de memoria dinámica: Como malloc, que devuelve un puntero void * que debe ser casteado al tipo adecuado según el uso.
Casteo de void * a otros tipos
Cuando tienes un puntero void *, debes realizar un casteo explícito al tipo de dato correcto antes de poder usarlo. El casteo convierte el puntero genérico a un puntero del tipo específico que necesites.En ambos ejemplos, el puntero genérico void * se convierte en un puntero del tipo adecuado (int * o char *), lo que permite acceder a los datos de manera correcta.

Operaciones no permitidas con void *
Es importante recordar que no puedes dereferenciar directamente un puntero void * porque el compilador no sabe qué tipo de datos está manejando ni cuál es su tamaño. Tampoco puedes realizar aritmética de punteros en un void * sin realizar un casteo previo.Conclusión
El uso de punteros void * en C es esencial para crear estructuras y funciones genéricas que puedan manejar diferentes tipos de datos. Sin embargo, es fundamental realizar el casteo adecuado al tipo correcto antes de acceder o manipular los datos, ya que de lo contrario podrías causar comportamientos inesperados o errores en tiempo de ejecución.
